import streamlit as st
import pandas as pd
import openai
import io
import json
import base64
from PIL import Image
import re

# Configuration Streamlit
st.set_page_config(page_title="Lecture Quantit√©s Re√ßues", layout="wide", page_icon="‚úÖ")

st.markdown("""
<h1 style="text-align:center;">‚úÖ Lecture et Synth√®se des Quantit√©s Re√ßues</h1>
<style>
    .card { background:#fff; padding:1rem; border-radius:0.8rem; margin-bottom:1.2rem; box-shadow:0 2px 4px rgba(0,0,0,0.09);}
    .section-title { font-size:1.2rem; color:#005b96; margin-bottom:.5rem;}
    .debug { font-size:0.95rem; color:#888;}
</style>
""", unsafe_allow_html=True)

# --- Cl√© API
OPENAI_API_KEY = st.secrets.get("OPENAI_API_KEY", "")
if not OPENAI_API_KEY:
    st.warning("‚ö†Ô∏è Aucune cl√© API d√©tect√©e. Veuillez l‚Äôajouter dans Settings > Secrets.")
    st.stop()
openai.api_key = OPENAI_API_KEY

# --- Prompt
prompt = (
    "Voici une photo contenant des calculs manuels li√©s √† des stocks (palettes, cartons, etc.). Je veux que tu :\n"
    "1. Interpr√®tes les calculs ligne par ligne, m√™me si l‚Äô√©criture est partielle ou approximative.\n"
    "2. Identifies la structure logique : par exemple si les nombres repr√©sentent des palettes, cartons, paquets, ou pi√®ces.\n"
    "3. Rassembles toutes les donn√©es selon les couleurs ou cat√©gories (par exemple : blanc, bleu, rouge, etc.).\n"
    "4. Cr√©es un tableau synth√©tique clair (avec colonnes comme : Couleur, Palettes, Cartons, Pi√®ces, Total pi√®ces).\n"
    "5. G√©n√®res un fichier Excel avec ces donn√©es pour que je puisse les exploiter facilement.\n"
    "Si des calculs semblent ambigus, pr√©cise les hypoth√®ses que tu prends.\n"
    "R√©ponds UNIQUEMENT par un tableau JSON array de la forme :\n"
    "[{\"Couleur\": \"Bleu\", \"Palettes\": 2, \"Cartons\": 10, \"Pi√®ces\": 80, \"Total pi√®ces\": 800}]\n"
    "N‚Äôajoute aucun texte autour, ne mets rien avant/apr√®s le JSON."
)

def extract_json_with_gpt4o(img: Image.Image, prompt: str) -> str:
    buf = io.BytesIO()
    img.save(buf, format="PNG")
    b64 = base64.b64encode(buf.getvalue()).decode()
    response = openai.chat.completions.create(
        model="gpt-4o",
        messages=[{
            "role": "user",
            "content": [
                {"type": "text", "text": prompt},
                {"type": "image_url", "image_url": {"url": f"data:image/png;base64,{b64}"}}
            ]
        }],
        max_tokens=1400,
        temperature=0
    )
    return response.choices[0].message.content

def extract_json_block(s: str) -> str:
    json_regex = re.compile(r'(\[.*?\]|\{.*?\})', re.DOTALL)
    matches = json_regex.findall(s)
    if not matches:
        raise ValueError("Aucun JSON trouv√© dans la sortie du mod√®le.")
    return max(matches, key=len)

# --- Interface
st.markdown('<div class="card"><div class="section-title">1. Importez la photo (jpeg/png) de votre feuille de calculs</div></div>', unsafe_allow_html=True)
uploaded = st.file_uploader("S√©lectionnez une photo de la feuille de calculs", type=["png", "jpg", "jpeg"])
if not uploaded:
    st.info("üñºÔ∏è Veuillez importer une image pour commencer l‚Äôanalyse.")
    st.stop()

file_bytes = uploaded.getvalue()
try:
    img = Image.open(io.BytesIO(file_bytes))
except Exception as e:
    st.error(f"Erreur lors du chargement de l'image : {e}")
    st.stop()

st.markdown('<div class="card"><div class="section-title">2. Aper√ßu de la photo</div></div>', unsafe_allow_html=True)
st.image(img, use_container_width=True)

st.markdown('<div class="card"><div class="section-title">3. Extraction du tableau</div>', unsafe_allow_html=True)
with st.spinner("üîç Analyse de la feuille en cours..."):
    try:
        output = extract_json_with_gpt4o(img, prompt)
        st.write("üß† R√©ponse brute GPT-4o :", output)
        output_clean = extract_json_block(output)
        lignes = json.loads(output_clean)
    except Exception as e:
        st.error("‚ùå Erreur lors de l‚Äôextraction ou du parsing JSON.")
        st.exception(e)
        st.stop()
st.markdown('</div>', unsafe_allow_html=True)

# --- R√©sultats
df = pd.DataFrame(lignes)
st.markdown('<div class="card"><div class="section-title">4. R√©sultat et t√©l√©chargement Excel</div>', unsafe_allow_html=True)
st.dataframe(df, use_container_width=True)

out = io.BytesIO()
with pd.ExcelWriter(out, engine="openpyxl") as writer:
    df.to_excel(writer, index=False, sheet_name="QUANTITES_RECUES")
out.seek(0)

st.download_button(
    "üì• T√©l√©charger le fichier Excel",
    data=out,
    file_name="quantites_recues.xlsx",
    mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
    use_container_width=True
)
st.markdown('</div>', unsafe_allow_html=True)
